# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ApplicationManagerService_pb2 as ApplicationManagerService__pb2
import CoordinatorJob_pb2 as CoordinatorJob__pb2
import Task_pb2 as Task__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


class ApplicationManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getJob = channel.unary_unary(
                '/ApplicationManagerService/getJob',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
                response_deserializer=CoordinatorJob__pb2.CoordinatorJob.FromString,
                )
        self.startJob = channel.unary_unary(
                '/ApplicationManagerService/startJob',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.registerJob = channel.unary_unary(
                '/ApplicationManagerService/registerJob',
                request_serializer=CoordinatorJob__pb2.CoordinatorJob.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.getTask = channel.unary_unary(
                '/ApplicationManagerService/getTask',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=Task__pb2.Task.FromString,
                )
        self.updateTaskStatus = channel.unary_unary(
                '/ApplicationManagerService/updateTaskStatus',
                request_serializer=Task__pb2.Task.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.getJobs = channel.unary_unary(
                '/ApplicationManagerService/getJobs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ApplicationManagerService__pb2.GetJobsResponse.FromString,
                )
        self.getDependencies = channel.unary_unary(
                '/ApplicationManagerService/getDependencies',
                request_serializer=ApplicationManagerService__pb2.GetDependenciesRequest.SerializeToString,
                response_deserializer=ApplicationManagerService__pb2.GetDependenciesResponse.FromString,
                )


class ApplicationManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplicationManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getJob': grpc.unary_unary_rpc_method_handler(
                    servicer.getJob,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
                    response_serializer=CoordinatorJob__pb2.CoordinatorJob.SerializeToString,
            ),
            'startJob': grpc.unary_unary_rpc_method_handler(
                    servicer.startJob,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerJob': grpc.unary_unary_rpc_method_handler(
                    servicer.registerJob,
                    request_deserializer=CoordinatorJob__pb2.CoordinatorJob.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getTask': grpc.unary_unary_rpc_method_handler(
                    servicer.getTask,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=Task__pb2.Task.SerializeToString,
            ),
            'updateTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTaskStatus,
                    request_deserializer=Task__pb2.Task.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.getJobs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ApplicationManagerService__pb2.GetJobsResponse.SerializeToString,
            ),
            'getDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.getDependencies,
                    request_deserializer=ApplicationManagerService__pb2.GetDependenciesRequest.FromString,
                    response_serializer=ApplicationManagerService__pb2.GetDependenciesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ApplicationManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApplicationManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/getJob',
            google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
            CoordinatorJob__pb2.CoordinatorJob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/startJob',
            google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/registerJob',
            CoordinatorJob__pb2.CoordinatorJob.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/getTask',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            Task__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/updateTaskStatus',
            Task__pb2.Task.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/getJobs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ApplicationManagerService__pb2.GetJobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApplicationManagerService/getDependencies',
            ApplicationManagerService__pb2.GetDependenciesRequest.SerializeToString,
            ApplicationManagerService__pb2.GetDependenciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
